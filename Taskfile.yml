version: '3'

env:
  CLOUDYPAD_BUILD_CORE_IMAGE_REGISTRY: "ghcr.io/pierrebeucher/cloudypad"
  CLOUDYPAD_BUILD_CORE_IMAGE_TAG: "local"
  CLOUDYPAD_BUILD_SUNSHINE_IMAGE_REGISTRY: "ghcr.io/pierrebeucher/cloudypad/sunshine"
  CLOUDYPAD_BUILD_SUNSHINE_IMAGE_TAG: "local"

tasks:

  #
  # Build and test
  #

  test-unit:
    cmd: npx mocha --config test/unit/.mocharc.json ./test/unit --recursive

  build-npm:
    cmds:
    - npm run build

  build-npm-tar:
    cmds:
    - task: build-npm
    - (cd dist && npm pack)

  #
  # Local development
  #

  # For faster development workflow, build and import Sunshine image into dev VM
  # - Build image locally as tar archive
  # - Copy image to dev VM
  # - Import image into dev VM
  # - Run Sunshine container in dev VM
  # Note: might as well use a bind mount from host to dev VM instead of scp
  dev-docker-sunshine-to-vm:
    cmds: 
    - task: build-sunshine-container-local
    - scp -i .vagrant/machines/default/virtualbox/private_key tmp/cloudypad.docker.tar vagrant@192.168.56.43:/tmp
    - ssh -i .vagrant/machines/default/virtualbox/private_key vagrant@192.168.56.43 docker load -i /tmp/cloudypad.docker.tar
    - ansible-playbook -i ansible/inventories/dev-vagrant.yml ansible/sunshine.yml -t sunshine-docker
    - ssh -i .vagrant/machines/default/virtualbox/private_key vagrant@192.168.56.43 
      docker compose -f sunshine/docker-compose.yml -p sunshine up -d

  # Quick dev build + deploy for rapid Sunshine container feedback loop
  dev-ansible-config:
    cmds:
    - ansible-playbook -i ansible/inventories/dev-vagrant.yml ansible/sunshine.yml
  
  dev-ansible-config-with-docker:
    cmds:
    - task: dev-docker-sunshine-to-vm
    - task: dev-ansible-config
    - vagrant ssh -c "docker restart cloudy"

  dev-docker-build-push-image:
    cmds:
    - docker compose -f containers/sunshine/docker-compose.yml build
    - docker compose -f containers/sunshine/docker-compose.yml push

  #
  # Tests

  # Detect potential circular deps with Madge
  test-circular-deps:
    cmd: npx -y madge --ts-config ./tsconfig.json -c .

  test-integ-full-lifecycle-all:
    cmds:
    - task: test-integ-full-lifecycle-aws
    - task: test-integ-full-lifecycle-azure
    - task: test-integ-full-lifecycle-gcp
    - task: test-integ-full-lifecycle-paperspace
    - task: test-integ-full-lifecycle-scaleway

  test-integ-full-lifecycle-aws:
    - test/integ/cli-full-lifecycle/run.sh aws

  test-integ-full-lifecycle-azure:
    - test/integ/cli-full-lifecycle/run.sh azure

  test-integ-full-lifecycle-gcp:
    - test/integ/cli-full-lifecycle/run.sh gcp

  test-integ-full-lifecycle-paperspace:
    - test/integ/cli-full-lifecycle/run.sh paperspace

  test-integ-full-lifecycle-scaleway:
    - test/integ/cli-full-lifecycle/run.sh scaleway

  test-analytics-key-match:
    - cmd: test/shell/test-matching-analytics-key.sh

  test-install-script:
    - cmd: test/shell/test-install.sh
  
  test-container-smoke-test:
    cmds:
    - task: build-core-container-local
    - docker run $CLOUDYPAD_BUILD_CORE_IMAGE_REGISTRY:$CLOUDYPAD_BUILD_CORE_IMAGE_TAG --version
    - >-
      [ $(docker run $CLOUDYPAD_BUILD_CORE_IMAGE_REGISTRY:$CLOUDYPAD_BUILD_CORE_IMAGE_TAG --version) = $(cat package.json | jq .version -r) ] 
      || echo "Version in container image doesn't match package.json version"

  #
  # Utils
  #

  mdbook-serve:
    dir: docs
    cmd: mdbook serve

  # Generate Typescript Paperspace client from OpenAPI specifications
  paperspace-client-gen:
    vars:
      PAPERSPACE_OPENAPI_DIR: "src/providers/paperspace/client/openapi"
      PAPERSPACE_GENERATED_DIR: "src/providers/paperspace/client/generated-api"
    cmds:
    - curl https://api.paperspace.com/v1/openapi.json -o {{ .PAPERSPACE_OPENAPI_DIR }}/openapi.json

    # Filter only machine-related operations
    # Our client doesn't need the rest for now
    - >-
      cat {{ .PAPERSPACE_OPENAPI_DIR }}/openapi.json | jq '{ openapi, info, servers, components, externalDocs, paths: { 
        "/auth/session": .paths."/auth/session",
        "/public-ips": .paths."/public-ips",
        "/public-ips/{ip}": .paths."/public-ips/{ip}",
        "/machines": .paths."/machines",
        "/machines/{id}": .paths."/machines/{id}",
        "/machines/{id}/restart": .paths."/machines/{id}/restart",
        "/machines/{id}/start": .paths."/machines/{id}/start",
        "/machines/{id}/stop": .paths."/machines/{id}/stop",
      }}' > {{ .PAPERSPACE_OPENAPI_DIR }}/machines-only.json
    
    # # Cleanup old files before generation
    - rm -rf {{ .PAPERSPACE_GENERATED_DIR }} || true

    # Run generator
    - >- 
      podman run -it --rm -v $PWD:/local -w /local docker.io/openapitools/openapi-generator-cli:latest@sha256:6747991566e4c3e43a30d5982f21da08c1cad78e95093fab04f494687b341788 generate
      -i {{ .PAPERSPACE_OPENAPI_DIR }}/machines-only.json
      --skip-validate-spec
      -g typescript-axios
      -o {{ .PAPERSPACE_GENERATED_DIR }}

  #
  # Build
  #
  #
  # Build Core and Sunshine containers
  # - local: inline cache, no push
  # - ci: use and push cache, but don't push image itself
  # - release: use cache, push final image

  # Core

  build-core-container-local:
    cmds:
    - >
      docker buildx build . 
      --cache-from type=registry,ref=$CLOUDYPAD_BUILD_CORE_IMAGE_REGISTRY:master-cache
      --cache-to type=inline
      -t $CLOUDYPAD_BUILD_CORE_IMAGE_REGISTRY:$CLOUDYPAD_BUILD_CORE_IMAGE_TAG
      --load

  build-core-container-ci:
    cmds:
    - >
      docker buildx build . 
      --cache-from type=registry,ref=$CLOUDYPAD_BUILD_CORE_IMAGE_REGISTRY:$CLOUDYPAD_BUILD_CORE_IMAGE_TAG-cache
      --cache-from type=registry,ref=$CLOUDYPAD_BUILD_CORE_IMAGE_REGISTRY:master-cache
      --cache-to type=registry,ref=$CLOUDYPAD_BUILD_CORE_IMAGE_REGISTRY:$CLOUDYPAD_BUILD_CORE_IMAGE_TAG-cache
      -t $CLOUDYPAD_BUILD_CORE_IMAGE_REGISTRY:$CLOUDYPAD_BUILD_CORE_IMAGE_TAG
      --load

  # Both amd64 and arm64
  build-core-container-release:
    cmds:
    - >
      docker buildx build . 
      --cache-from type=registry,ref=$CLOUDYPAD_BUILD_CORE_IMAGE_REGISTRY:$CLOUDYPAD_BUILD_CORE_IMAGE_TAG-cache
      --cache-from type=registry,ref=$CLOUDYPAD_BUILD_CORE_IMAGE_REGISTRY:master-cache
      -t $CLOUDYPAD_BUILD_CORE_IMAGE_REGISTRY:$CLOUDYPAD_BUILD_CORE_IMAGE_TAG
      --platform "linux/amd64,linux/arm64"
      --push

  # Sunshine

  build-sunshine-container-local:
    cmds:
    - >
      docker buildx build containers/sunshine/ 
      --cache-from type=registry,ref=$CLOUDYPAD_BUILD_SUNSHINE_IMAGE_REGISTRY:master-cache
      --cache-to type=inline
      -o type=docker,dest=./tmp/cloudypad.docker.tar 
      -t $CLOUDYPAD_BUILD_SUNSHINE_IMAGE_REGISTRY:$CLOUDYPAD_BUILD_SUNSHINE_IMAGE_TAG
      --load

  build-sunshine-container-ci:
    cmds:
    - >
      docker buildx build containers/sunshine/ 
      --cache-from type=registry,ref=$CLOUDYPAD_BUILD_SUNSHINE_IMAGE_REGISTRY:$CLOUDYPAD_BUILD_SUNSHINE_IMAGE_TAG-cache
      --cache-from type=registry,ref=$CLOUDYPAD_BUILD_SUNSHINE_IMAGE_REGISTRY:master-cache
      --cache-to type=registry,ref=$CLOUDYPAD_BUILD_SUNSHINE_IMAGE_REGISTRY:$CLOUDYPAD_BUILD_SUNSHINE_IMAGE_TAG-cache
      -t $CLOUDYPAD_BUILD_SUNSHINE_IMAGE_REGISTRY:$CLOUDYPAD_BUILD_SUNSHINE_IMAGE_TAG
      --load

  build-sunshine-container-release:
    cmds:
    - >
      docker buildx build containers/sunshine/ 
      --cache-from type=registry,ref=$CLOUDYPAD_BUILD_SUNSHINE_IMAGE_REGISTRY:$CLOUDYPAD_BUILD_SUNSHINE_IMAGE_TAG-cache
      --cache-from type=registry,ref=$CLOUDYPAD_BUILD_SUNSHINE_IMAGE_REGISTRY:master-cache
      -t $CLOUDYPAD_BUILD_SUNSHINE_IMAGE_REGISTRY:$CLOUDYPAD_BUILD_SUNSHINE_IMAGE_TAG
      --push

  #
  # Release
  #

  release-check-version:
    cmds:
    - >
      [[ -z "{{ .CLOUDYPAD_RELEASE_VERSION }}" ]] && echo "CLOUDYPAD_RELEASE_VERSION not set" && exit 1 || true

  
  release-create:
    cmd: ./hack/release-create.sh