# Deploy Sunshine in container
# Use with -e sunshine_nvidia_enable=true for Nvidia GPU
---
- name: "Wait for machine to be reachable (timeout: 5min)"
  hosts: all
  gather_facts: false
  tags: [ always ] # always run this task to wait for SSH
  tasks:
    - wait_for_connection:
        timeout: 300
        sleep: 5

- name: Sunshine container
  hosts: all
  pre_tasks:
    
    - name: Check if provider specific vars file exists
      set_fact:
        provider_vars_exists: "{{ lookup('file', 'providers/' + cloudypad_provider + '/vars.yml', errors='ignore') is not none }}"

    - name: Load provider specific vars
      include_vars: "providers/{{ cloudypad_provider }}/vars.yml"
      when: provider_vars_exists

    # Pre-Docker fixes for dummy provider
    - name: Create Docker init.d directory if needed
      file:
        path: /etc/init.d
        state: directory
        mode: '0755'
      when: cloudypad_provider is defined and cloudypad_provider == "dummy"
      become: true
      
    - name: Create a dummy Docker init script to prevent ulimit errors
      copy:
        dest: /etc/init.d/docker
        content: |
          #!/bin/sh
          set -e

          ### BEGIN INIT INFO
          # Provides:           docker
          # Required-Start:     $syslog $remote_fs
          # Required-Stop:      $syslog $remote_fs
          # Should-Start:       cgroupfs-mount cgroup-lite
          # Should-Stop:        cgroupfs-mount cgroup-lite
          # Default-Start:      2 3 4 5
          # Default-Stop:       0 1 6
          # Short-Description:  Create lightweight, portable, self-sufficient containers.
          # Description:
          #  Docker is an open-source project to easily create lightweight, portable,
          #  self-sufficient containers from any application. The same container that a
          #  developer builds and tests on a laptop can run at scale, in production, on
          #  VMs, bare metal, OpenStack clusters, public clouds and more.
          ### END INIT INFO

          export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

          BASE=docker

          # modify these in /etc/default/$BASE (/etc/default/docker)
          DOCKERD=/usr/bin/dockerd
          # This is the pid file managed by docker itself
          DOCKER_PIDFILE=/var/run/$BASE.pid
          # This is the pid file created/managed by start-stop-daemon
          DOCKER_SSD_PIDFILE=/var/run/$BASE-ssd.pid
          DOCKER_LOGFILE=/var/log/$BASE.log
          DOCKER_OPTS=
          DOCKER_DESC="Docker"

          # Get lsb functions
          . /lib/lsb/init-functions

          if [ -f /etc/default/$BASE ]; then
                  . /etc/default/$BASE
          fi

          # Check docker is present
          if [ ! -x $DOCKERD ]; then
                  log_failure_msg "$DOCKERD not present or not executable"
                  exit 1
          fi

          fail_unless_root() {
                  if [ "$(id -u)" != '0' ]; then
                          log_failure_msg "$DOCKER_DESC must be run as root"
                          exit 1
                  fi
          }

          case "$1" in
                  start)
                          fail_unless_root

                          touch "$DOCKER_LOGFILE"
                          chgrp docker "$DOCKER_LOGFILE"

                          # REMOVED: ulimit -Hn 524288
                          # REMOVED: ulimit -u unlimited / ulimit -p unlimited

                          log_begin_msg "Starting $DOCKER_DESC: $BASE"
                          start-stop-daemon --start --background \
                                  --no-close \
                                  --exec "$DOCKERD" \
                                  --pidfile "$DOCKER_SSD_PIDFILE" \
                                  --make-pidfile \
                                  -- \
                                  -p "$DOCKER_PIDFILE" \
                                  $DOCKER_OPTS \
                                  >> "$DOCKER_LOGFILE" 2>&1
                          log_end_msg $?
                          ;;

                  stop)
                          fail_unless_root
                          if [ -f "$DOCKER_SSD_PIDFILE" ]; then
                                  log_begin_msg "Stopping $DOCKER_DESC: $BASE"
                                  start-stop-daemon --stop --pidfile "$DOCKER_SSD_PIDFILE" --retry 10
                                  log_end_msg $?
                          else
                                  log_warning_msg "Docker already stopped - file $DOCKER_SSD_PIDFILE not found."
                          fi
                          ;;

                  restart)
                          fail_unless_root
                          docker_pid=$(cat "$DOCKER_SSD_PIDFILE" 2> /dev/null || true)
                          [ -n "$docker_pid" ] \
                                  && ps -p $docker_pid > /dev/null 2>&1 \
                                  && $0 stop
                          $0 start
                          ;;

                  force-reload)
                          fail_unless_root
                          $0 restart
                          ;;

                  status)
                          status_of_proc -p "$DOCKER_SSD_PIDFILE" "$DOCKERD" "$DOCKER_DESC"
                          ;;

                  *)
                          echo "Usage: service docker {start|stop|restart|status}"
                          exit 1
                          ;;
          esac
        mode: '0755'
      when: cloudypad_provider is defined and cloudypad_provider == "dummy"
      become: true

  roles:
    - role: roles/prepare-install
      tags: [ prepare-install ]

    - role: roles/data-disk
      become: true
      tags: [ data-disk ]
      when: cloudypad_data_disk_id is defined

    - role: geerlingguy.docker
      tags: [ docker ]
      become: true
      docker_users:
      - "{{ ansible_user_id }}"
      vars:
        # Do not add Docker repository on Scaleway as it's already set and keyrings would conflict otherwise
        docker_add_repo: "{{ cloudypad_provider != 'scaleway' }}"
        # Disable resource limits for Docker in container environments (dummy provider)

    
    - role: roles/nvidia-driver
      tags: [ nvidia ]
      become: true
      when: sunshine_nvidia_enable
      vars:
        nvidia_driver_module_params: |
          # nvidia-drm module is required by Wolf
          options nvidia-drm modeset=1
    
    - role: roles/sunshine
      tags: [ sunshine ]
    
    # Install autostop last to avoid shutdown during installation process
    - role: roles/autostop
      become: true
      tags: [ autostop ]