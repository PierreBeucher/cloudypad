---
- name: unload nouveau
  modprobe:
    name: nouveau
    state: absent
  ignore_errors: true

# Remove apt packages in favor of .run file
# Using .run file provides better reproducibility as we're certain about version installed
- name: remove unused nvidia-*-server driver packages
  apt:
    name: "{{ nvidia_driver_package_version | ternary(item + '=' + nvidia_driver_package_version, item) }}"
    state: 'absent'
    autoremove: true
    purge: true
  loop:
    - "nvidia-headless-{{ nvidia_driver_ubuntu_branch }}{{ nvidia_driver_ubuntu_packages_suffix }}"
    - "nvidia-utils-{{ nvidia_driver_ubuntu_branch }}{{ nvidia_driver_ubuntu_packages_suffix }}"
    - "nvidia-headless-no-dkms-{{ nvidia_driver_ubuntu_branch }}{{ nvidia_driver_ubuntu_packages_suffix }}"
    - "nvidia-kernel-source-{{ nvidia_driver_ubuntu_branch }}{{ nvidia_driver_ubuntu_packages_suffix }}"
  register: install_driver
  environment: "{{proxy_env if proxy_env is defined else {}}}"

- name: remove Ubuntu graphics ppa
  apt_repository:
    repo: ppa:graphics-drivers/ppa
    state: absent
    update_cache: true

- name: reboot after old driver package removal
  reboot:
    post_reboot_delay: 10
  when: install_driver.changed

# required on some system to create /dev/nvidia-caps* automatically, see https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#device-node-verification
- name: install nvidia-modprobe 
  apt:
    name: nvidia-modprobe
    update_cache: true

- name: install NVIDIA drivers
  import_tasks: driver.yml
  tags: [ driver ]

- name: Set module parameters
  register: nvidia_driver_module_file_result
  template:
    src: nvidia.conf.j2
    dest: "{{ nvidia_driver_module_file }}"
    mode: '0644'

- name: Update initramfs after module parameters update
  command: update-initramfs -u
  when: nvidia_driver_module_file_result.changed

# Setup a service running in userspace to ensure /dev/nvidia-caps/* devices are present on boot
# See https://docs.nvidia.com/datacenter/tesla/mig-user-guide/index.html#device-nodes-devfs
- name: Ensure nvidia-caps startup script exists
  register: nvidia_dev_script
  copy:
    dest: /usr/local/bin/nvidia-setup-devices.sh
    mode: '0755'
    src: files/nvidia-setup-devices.sh

- name: Ensure nvidia-caps systemd script exists
  register: nvidia_dev_systemd_unit
  copy:
    dest: /etc/systemd/system/nvidia-setup-devices.service
    content: |
      [Unit]
      Description=Setup NVIDIA devices

      [Service]
      ExecStart=/usr/local/bin/nvidia-setup-devices.sh

      [Install]
      WantedBy=multi-user.target

- name: Reload systemd for nvidia-caps
  ansible.builtin.command: systemctl daemon-reload
  when: nvidia_dev_systemd_unit.changed or nvidia_dev_script.changed

- name: Enable nvidia-setup-devices service
  ansible.builtin.systemd_service:
    name: nvidia-setup-devices
    enabled: true

- name: reboot after initramfs or NVIDIA devices script update
  reboot:
    post_reboot_delay: 10
  when: nvidia_driver_module_file_result.changed or nvidia_dev_systemd_unit.changed or nvidia_dev_script.changed

- name: install NVIDIA container toolkit
  import_tasks: container-toolkit.yml
  tags: [ nvidia-container-toolkit ]